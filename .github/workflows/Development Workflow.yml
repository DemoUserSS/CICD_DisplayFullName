name: Development workflow

on:
  push:
    branches:
      - Developer

# Here the environment variable is declared in workflow level
env:
  # Replace with your Orchestrator Values 
  PROJECT_NAME: CICD_Pipeline                        
  PROJECT_FOLDER: Shared
  ORCH_URL: https://cloud.uipath.com/
  ORCH_TENANT: DefaultTenant
  ORCH_CLIENT_ID: ${{ secrets.UIPATHCLIENTID }}
  ORCH_USER_KEY: ${{ secrets.UIPATHUSERKEY }}
  ORCH_ACC_NAME: ${{ secrets.UIPATHACCOUNTNAME }}
  CLI_URL: https://uipath.visualstudio.com/Public.Feeds/_artifacts/feed/UiPath-Official/NuGet/UiPath.CLI.Windows/overview/23.10.8753.32995
  

jobs:
  print-details:
    runs-on: ubuntu-latest
    steps:
      - name: echo-default-env-variables
        run: |
          echo "Home: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"
  cleaner:
    runs-on: ubuntu-latest
    steps:
      - name: Runner workspace path
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
  build-uipath-nuget-package:
    # You should be able to run on windows 2019 or windows latest
    needs: cleaner
    runs-on: windows-latest
    steps: 
      - name: Check out repository code
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
      - name: Build Nuget Package
        shell: pwsh
        run: ${{ github.workspace }}\Scripts\UiPathPack.ps1 ${{ github.workspace }}\project.json -destination_folder ${{ github.workspace }}\package -autoVersion
      - name: Upload UiPath Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: |
           package/*.*
           Scripts/*.ps1
  publish-uipath-nuget-package:
    needs: build-uipath-nuget-package
    runs-on: windows-latest
    steps: 
      - name: Download UiPath Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Artifacts
      - name: Publish Nuget Package to DEV
        shell: pwsh
        run: ${{ github.workspace }}\Scripts\UiPathDeploy.ps1 ${{ github.workspace }}\package ${{env.ORCH_URL}} ${{env.ORCH_TENANT}} -UserKey ${{ secrets.UIPATHUSERKEY }} -account_name ${{ secrets.UIPATHACCOUNTNAME }}
 
 
  test-uipath-published-package:
    needs: publish-uipath-nuget-package
    runs-on: windows-latest  
    steps: 
      - name: Download UiPath Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Artifacts
      - name: Test the Package With Test Cases 
        run: ${{ github.workspace }}\scripts\\UiPathRunTest.ps1  ${{env.ORCH_URL}} ${{env.ORCH_TENANT}} -UserKey ${{env.ORCH_USER_KEY}} -account_name ${{env.ORCH_ACC_NAME}} -testset "TestSet1"
  
  create-pull-request:
    needs: test-uipath-published-package
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "Main"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_label: "feature, automated pr"
          pr_title: "Pull Request From Github Action"
  
  # merge:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Git
  #       run: |
  #         git config --global user.email "sweetechuse@gmail.com.com"
  #         git config --global user.name "DemoUserSS"

  #     - name: Merge only if approved
  #       run: |
  #         PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
  #         APPROVALS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
  #           "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" \
  #           | jq '.[] | select(.state == "APPROVED") | .user.login')

  #         if [ -z "$APPROVALS" ]; then
  #           echo "No approvals found. Exiting without merging."
  #           exit 1
  #         else
  #           echo "Approvals found. Merging pull request..."
  #           git merge --no-ff "${GITHUB_HEAD_REF}" -m "Merge pull request #${PR_NUMBER}"
  #           git push origin HEAD:${GITHUB_BASE_REF}
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   
    # notify:
    # name: Notify on Slack
    # runs-on: ubuntu-latest
    # # Only run this workflow when "build" workflow succeeds
    # needs: [ test-uipath-published-package]
    # if: success()
    # steps:
    # - name: Notify Success to Slack
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' --data '{"text":"UiPath NuGet Package build,publish & tested successful also merged with!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
    # if: failure()
    # - name: Notify Failure to Slack
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' --data '{"text":"UiPath NuGet Package build/publish/tested failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
